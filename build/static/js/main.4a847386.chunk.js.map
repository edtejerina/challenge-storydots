{"version":3,"sources":["components/Header.js","components/Error.js","components/Form.js","components/Weather.js","components/MapView.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Error","message","Form","search","setSearch","setConsult","useState","error","setError","onSubmit","e","preventDefault","trim","type","name","id","value","onChange","target","placeholder","htmlFor","Weather","result","main","temp_max","temp_min","pressure","humidity","MapView","city","location","lat","coord","lng","lon","bootstrapURLKeys","key","process","API_KEY_GOOGLE_MAPS","center","defaultZoom","onGoogleApiLoaded","map","maps","Marker","position","renderMarkers","App","consult","setResult","useEffect","url","fetch","then","res","json","code","fetchAPI","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a847386.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({title}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrapper white\">\r\n                 <a href=\"#!\" className=\"brand-logo blue-grey darken-4\">{title}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\">{message}</p>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Form = ({search, setSearch, setConsult}) => {\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    // función que coloca los elementos en el state\r\n    const handleChange = e => {\r\n        // actualizar el state\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    // Cuando el usuario da submit al form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        // validar\r\n        if(search.trim() === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setConsult(true);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error ? <Error message=\"El campo ciudad es obligatorio\" /> : null }\r\n            \r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    id=\"city\"\r\n                    value={search}\r\n                    onChange={handleChange}\r\n                    placeholder=\"ejemplo: La Plata\"\r\n                />\r\n                <label htmlFor=\"city\">Ciudad: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <input  \r\n                    type=\"submit\"\r\n                    value=\"Buscar Clima\"\r\n                    className=\"btn-large btn-block yellow accent-4 black-text\"\r\n                />\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n\r\nForm.propTypes = {\r\n    search : PropTypes.string.isRequired,\r\n    setSearch : PropTypes.func.isRequired,\r\n    setConsult : PropTypes.func.isRequired,\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Weather = ({result}) => {\r\n\r\n    // extraer los valores\r\n    const { name, main } = result;\r\n\r\n    if(!name) return null;\r\n\r\n    return ( \r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\">\r\n                <h2>El clima de {name} es: </h2>\r\n                <p>Temperatura Máxima:\r\n                    {main.temp_max }  <span> &#x2103; </span>\r\n                </p>\r\n                <p>Temperatura Minima:\r\n                    {main.temp_min }  <span> &#x2103; </span>\r\n                </p>\r\n                <p>Presión:\r\n                    {main.pressure }hPa\r\n                </p>\r\n                <p>Humedad:\r\n                    {main.humidity }%\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nWeather.propTypes = {\r\n    result: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\n\r\nfunction MapView({city}){\r\n\r\n  if(!city.name) return null;\r\n\r\n  //Informacion de la ubicacion\r\n  const location = {\r\n    lat: city.coord.lat,\r\n    lng: city.coord.lon\r\n  };\r\n  \r\n  //Definiendo el marcador\r\n  const renderMarkers = (map, maps) => {\r\n    let marker = new maps.Marker({\r\n    position: location,\r\n    map\r\n    });\r\n    return marker;\r\n   };\r\n    return(\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: process.env.API_KEY_GOOGLE_MAPS }}\r\n        center={location}\r\n        defaultZoom={12}\r\n        onGoogleApiLoaded={({ map, maps }) => renderMarkers(map, maps)}\r\n      />\r\n    )\r\n\r\n}\r\n\r\nexport default MapView ;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\nimport Error from './components/Error';\r\nimport MapView from './components/MapView';\r\n\r\nfunction App() {\r\n\r\n  // state del formulario\r\n  const [search, setSearch] = useState('');\r\n  const [consult, setConsult] = useState(false); //Si es true significa que se envio el formulario\r\n  const [result, setResult] = useState({}); //Contiene el objeto con el clima de la ciudad buscada\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = () => {\r\n        //Si la consulta se realizo (true)\r\n        if(consult) {\r\n          const url = `/api/weather/?name=${search}`;\r\n          fetch(url)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            //En caso de que no existan resultados cambio el state de error\r\n            if(res.code === 404) {\r\n              setError(true);\r\n            } else {\r\n                setError(false);\r\n            }\r\n            //cambiando el state de resultado y consulta\r\n            setResult(res)\r\n            setConsult(false);\r\n          })\r\n        }\r\n        \r\n    }\r\n    fetchAPI();\r\n    // eslint-disable-next-line\r\n  },[consult]);\r\n\r\n  return (\r\n    <Fragment>\r\n        <Header \r\n          title='Clima'\r\n        />\r\n\r\n        <div className=\"contenedor-form\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col m6 s12\">\r\n                        <Form search={search} setSearch={setSearch} setConsult={setConsult} />\r\n                    </div>\r\n                    <div className=\"col m6 s12\">\r\n                        {error ? <Error message=\"No hay resultados\" /> : <Weather result={result} />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>    \r\n        <div className=\"map-container\">\r\n          {error ? null : <MapView city={result}/>}\r\n        </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}